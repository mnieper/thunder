/*
 * Copyright (C) 2017  Marc Nieper-Wißkirchen
 *
 * This file is part of Thunder.
 *
 * Thunder is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 3, or (at
 * your option) any later version.
 *
 * Thunder is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * Authors:
 *      Marc Nieper-Wißkirchen
 */



EXPAND_INSTRUCTION (entry, special)
EXPAND_INSTRUCTION (ret, special)

EXPAND_INSTRUCTION (ellipsis, void)
EXPAND_INSTRUCTION (prepare, void)
EXPAND_INSTRUCTION (pushargi, im)
EXPAND_INSTRUCTION (pushargr, ir)
EXPAND_INSTRUCTION (pushargi_f, fm)
EXPAND_INSTRUCTION (pushargr_f, fr)
EXPAND_INSTRUCTION (pushargi_d, dm)
EXPAND_INSTRUCTION (pushargr_d, fr)

/* Binary ALU operations */
EXPAND_INSTRUCTION (addi, ir_ir_im)
EXPAND_INSTRUCTION (addr, ir_ir_ir)
EXPAND_INSTRUCTION (addi_f, fr_fr_fm)
EXPAND_INSTRUCTION (addr_f, fr_fr_fr)
EXPAND_INSTRUCTION (addxi, ir_ir_im)
EXPAND_INSTRUCTION (addxr, ir_ir_ir)
EXPAND_INSTRUCTION (addci, ir_ir_im)
EXPAND_INSTRUCTION (addcr, ir_ir_ir)
EXPAND_INSTRUCTION (subi, ir_ir_im)
EXPAND_INSTRUCTION (subr, ir_ir_ir)
EXPAND_INSTRUCTION (subxi, ir_ir_im)
EXPAND_INSTRUCTION (subxr, ir_ir_ir)
EXPAND_INSTRUCTION (subci, ir_ir_im)
EXPAND_INSTRUCTION (subcr, ir_ir_ir)
EXPAND_INSTRUCTION (rsbr, ir_ir_ir)
EXPAND_INSTRUCTION (rsbi, ir_ir_im)
EXPAND_INSTRUCTION (mulr, ir_ir_ir)
EXPAND_INSTRUCTION (muli, ir_ir_im)
EXPAND_INSTRUCTION (divr, ir_ir_ir)
EXPAND_INSTRUCTION (divi, ir_ir_im)
EXPAND_INSTRUCTION (remr, ir_ir_ir)
EXPAND_INSTRUCTION (remi, ir_ir_im)
EXPAND_INSTRUCTION (remr_u, ir_ir_ir)
EXPAND_INSTRUCTION (remi_u, ir_ir_im)
EXPAND_INSTRUCTION (andr, ir_ir_ir)
EXPAND_INSTRUCTION (andi, ir_ir_im)
EXPAND_INSTRUCTION (orr, ir_ir_ir)
EXPAND_INSTRUCTION (ori, ir_ir_im)
EXPAND_INSTRUCTION (xorr, ir_ir_ir)
EXPAND_INSTRUCTION (xori, ir_ir_im)
EXPAND_INSTRUCTION (lshr, ir_ir_ir)
EXPAND_INSTRUCTION (lshi, ir_ir_im)
EXPAND_INSTRUCTION (rshr, ir_ir_ir)
EXPAND_INSTRUCTION (rshi, ir_ir_im)
EXPAND_INSTRUCTION (rshr_u, ir_ir_ir)
EXPAND_INSTRUCTION (rshi_u, ir_ir_im)

/* Four operand binary ALU operations */
EXPAND_INSTRUCTION (qmulr, ir_ir_ir_ir)
EXPAND_INSTRUCTION (qmuli, ir_ir_ir_im)
EXPAND_INSTRUCTION (qmulr_u, ir_ir_ir_ir)
EXPAND_INSTRUCTION (qmuli_u, ir_ir_ir_im)
EXPAND_INSTRUCTION (qdivr, ir_ir_ir_ir)
EXPAND_INSTRUCTION (qdivi, ir_ir_ir_im)
EXPAND_INSTRUCTION (qdivr_u, ir_ir_ir_ir)
EXPAND_INSTRUCTION (qdivi_u, ir_ir_ir_im)

/* Unary ALU operations */
EXPAND_INSTRUCTION (negr, ir_ir)
EXPAND_INSTRUCTION (comr, ir_ir)
/* TODO(XXX): absr sqrtr */

/* Compare instructions */
EXPAND_INSTRUCTION (ltr, ir_ir_ir)
EXPAND_INSTRUCTION (lti, ir_ir_im)
EXPAND_INSTRUCTION (ltr_u, ir_ir_ir)
EXPAND_INSTRUCTION (lti_u, ir_ir_im)
EXPAND_INSTRUCTION (ler, ir_ir_ir)
EXPAND_INSTRUCTION (lei, ir_ir_im)
EXPAND_INSTRUCTION (ler_u, ir_ir_ir)
EXPAND_INSTRUCTION (lei_u, ir_ir_im)
EXPAND_INSTRUCTION (eqr, ir_ir_ir)
EXPAND_INSTRUCTION (eqi, ir_ir_im)
EXPAND_INSTRUCTION (ger, ir_ir_ir)
EXPAND_INSTRUCTION (gei, ir_ir_im)
EXPAND_INSTRUCTION (ger_u, ir_ir_ir)
EXPAND_INSTRUCTION (gei_u, ir_ir_im)
EXPAND_INSTRUCTION (gtr, ir_ir_ir)
EXPAND_INSTRUCTION (gti, ir_ir_im)
EXPAND_INSTRUCTION (gtr_u, ir_ir_ir)
EXPAND_INSTRUCTION (gti_u, ir_ir_im)
EXPAND_INSTRUCTION (ner, ir_ir_ir)
EXPAND_INSTRUCTION (nei, ir_ir_im)
/* TODO(XXX): unltr ... unordr */

/* Transfer operations */
EXPAND_INSTRUCTION (movi, ir_fn)
EXPAND_INSTRUCTION (movr, ir_ir)
EXPAND_INSTRUCTION (movi_f, fr_fm) 
EXPAND_INSTRUCTION (movr_f, fr_fr)
EXPAND_INSTRUCTION (movi_d, fr_dm) 
EXPAND_INSTRUCTION (movr_d, fr_fr)

EXPAND_INSTRUCTION (extr_f_d, fr_fr)
EXPAND_INSTRUCTION (extr_d_f, fr_fr)

/* TODO(XXX): extr, truncr */

/* Network extensions */

/* Load operations */

/* Store operations */

/* Argument management */
// Only prepare, pushargi, pushargr, retval, ret, ellipsis

/* Branch instructions */
EXPAND_INSTRUCTION (bltr, lb_ir_ir)
EXPAND_INSTRUCTION (blti, lb_ir_im)
EXPAND_INSTRUCTION (bltr_u, lb_ir_ir)
EXPAND_INSTRUCTION (blti_u, lb_ir_im)
EXPAND_INSTRUCTION (bler, lb_ir_ir)
EXPAND_INSTRUCTION (blei, lb_ir_im)
EXPAND_INSTRUCTION (bler_u, lb_ir_ir)
EXPAND_INSTRUCTION (blei_u, lb_ir_im)
EXPAND_INSTRUCTION (beqr, lb_ir_ir)
EXPAND_INSTRUCTION (beqi, lb_ir_im)
EXPAND_INSTRUCTION (bger, lb_ir_ir)
EXPAND_INSTRUCTION (bgei, lb_ir_im)
EXPAND_INSTRUCTION (bger_u, lb_ir_ir)
EXPAND_INSTRUCTION (bgei_u, lb_ir_im)
EXPAND_INSTRUCTION (bgtr, lb_ir_ir)
EXPAND_INSTRUCTION (bgti, lb_ir_im)
EXPAND_INSTRUCTION (bgtr_u, lb_ir_ir)
EXPAND_INSTRUCTION (bgti_u, lb_ir_im)
EXPAND_INSTRUCTION (bner, lb_ir_ir)
EXPAND_INSTRUCTION (bnei, lb_ir_im)


/* Jump and return operations */
EXPAND_INSTRUCTION (callr, ir)
EXPAND_INSTRUCTION (calli, fn)
EXPAND_INSTRUCTION (finishr, ir)
EXPAND_INSTRUCTION (finishi, fn)
EXPAND_INSTRUCTION (jmpr, ir)
EXPAND_INSTRUCTION (jmpi, lb)
